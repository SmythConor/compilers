options { JAVA_UNICODE_ESCAPE = true; }
PARSER_BEGIN(LexicalAnalyser)
public class LexicalAnalyser {
	public static void main(String[] args) {
		LexicalAnalyser parser = new LexicalAnalyser(System.in);
		for(Token t = getNextToken(); t.kind != EOF; t = getNextToken()) {
			System.out.println(t.kind);
		}
	}
}
PARSER_END(LexicalAnalyser)

SKIP: 
{" " | "\t" | "\n" | "\r"}

TOKEN:
{
	<COMMENT: "//[.|^//]*">
}

TOKEN:
{
	<NOT: ~[]>
}

/* Identifiers */
//TOKEN:
//{
//	<#CHAR : "[a-zA-Z]"> |
//	<STRING: "CHAR+">
//	<ID : "[0-9A-Za-z_]+"> |
//	<STRING : "\"[.*|^\"]\""> |
//	<#DIGIT : "[0-9]"> |
//	<NUM: "<DIGIT>+">
//}

/* Comnparirson Operators */
TOKEN:
{
	<EQ: "=">     |
	<NOTEQ: "!="> |
	<LTE : ">=">   |
	<GTE : "<=">   |
	<GT : ">">     |
	<LT : "<">
}

/* Operators */
TOKEN:
{
	<PLUS : "+"> |
	<SUB : "-">  |
	<MULT : "*"> |
	<DIV : "/"> 
}

/* Punctuation */
TOKEN: 
{
	<COMMA : ",">      |
	<SEMI_COLON : ";"> |
	<COLON: ":">      |
	<PERCENT: "%">    |
	<DOT: ".">        |
	<QMARK : "?">      |
	<EXLMARK : "!">    |
	<ASSIGN : ":=">    
}

/* Braces */
TOKEN:
{
	<LBRACE: "{"> |
	<RBRACE: "}"> |
	<LPAREN: "("> |
	<RPAREN: ")"> |
	<LBRAC: "[">  |
	<RBRAC: "]"> 
}

/* Keywords */
//TOKEN:
//{
//	<AND : "and"> |
//	<BOOL : "bool"> |
//	<CONST : "const"> |
//	<DO : "do"> |
//	<ELSE : "else"> |
//	<FALSE : "false"> |
//	<IF : "if"> |
//	<INT : "int"> |
//	<MAIN : "main"> |
//	<NOT : "not"> |
//	<OR : "or"> |
//	<REAL : "real"> |
//	<RETURN : "return"> |
//	<STRING : "string"> |
//	<THEN : "then"> |
//	<TRUE : "true"> |
//	<VAR : "var"> |
//	<VOID : "void"> |
//	<WHILE : "while">
//}

void Start() : {} {
	<NOT>
}
