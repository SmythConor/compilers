/* Options */
options { JAVA_UNICODE_ESCAPE = true; }

/* User Code */
PARSER_BEGIN(LexicalAnalyser)
public class LexicalAnalyser {
	public static void main(String[] args) {
		LexicalAnalyser parser;
		try {
			parser = new LexicalAnalyser(new java.io.FileInputStream(args[0]));
		} catch (java.io.FileNotFoundException e) {
			System.err.println("File " + args[0] + " not found.");
			return;
		}

		for(Token t = getNextToken(); t.kind != EOF; t = getNextToken()) {
			System.out.println(t.image);
		}
	}
}
PARSER_END(LexicalAnalyser)

	/* Token definitions */
SKIP:
{" " | "\t" | "\n" | "\r"
|  <"--" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* Keywords */
TOKEN:
{
	<AND : "and"> |
		<BOOL : "bool"> |
		<CONST : "const"> |
		<DO : "do"> |
		<ELSE : "else"> |
		<FALSE : "false"> |
		<IF : "if"> |
		<INT : "int"> |
		<MAIN : "main"> |
		<NOT : "not"> |
		<OR : "or"> |
		<REAL : "real"> |
		<RETURN : "return"> |
		<STRING : "string"> |
		<THEN : "then"> |
		<TRUE : "true"> |
		<VAR : "var"> |
		<VOID : "void"> |
		<WHILE : "while"> |
		<BEGIN: "begin"> |
		<END: "end">
}

/* Identifiers */
TOKEN:
{
	<#LETTER: ["a"-"z", "A"-"Z"]> |
	<#CHAR: ["a"-"z", "A"-"Z", "0"-"9", "_"]> |
	<ID: (<LETTER>)(<CHAR>)+> |
	<#DIGIT : "[0-9]"> |
	<NUM: "<DIGIT>+"> |
	<DEC: "<NUM>*.<NUM>">
}
//
///* Comnparirson Operators */
//TOKEN:
//{
//	<EQ: "=">     |
//	<NOTEQ: "!="> |
//	<LTE: ">=">   |
//	<GTE: "<=">   |
//	<GT: ">">     |
//	<LT: "<">
//}
//
///* Operators */
//TOKEN:
//{
//	<PLUS: "+"> |
//	<SUB: "-">  |
//	<MULT: "*"> |
//	<DIV: "/"> 
//}
//
///* Punctuation */
//TOKEN: 
//{
//	<COMMA: ",">      |
//	<SEMI_COLON: ";"> |
//	<COLON: ":">      |
//	<PERCENT: "%">    |
//	<DOT: ".">        |
//	<QMARK: "?">      |
//	<EXLMARK: "!">    |
//	<ASSIGN: ":=">
//}
//
///* Braces */
TOKEN:
{
//	<LBRACE: "{"> |
//	<RBRACE: "}"> |
	<LPAREN : "("> |
	<RPAREN : ")">
//	<LBRAC: "[">  |
//	<RBRAC: "]"> 
}

TOKEN:
{
	<ERR: ~[]>
}

void Keyword() : {} {
	<AND> |
		<BOOL> |
		<CONST> |
		<DO> |
		<ELSE> |
		<FALSE> |
		<IF> |
		<INT> |
		<MAIN> |
		<NOT> |
		<OR> |
		<REAL> |
		<RETURN> |
		<STRING> |
		<THEN> |
		<TRUE> |
		<VAR> |
		<VOID> |
		<WHILE> |
		<BEGIN> |
		<END>
}

void Identifiers() : {} {
	<DEC> | <NUM> | <ID>
}

void Braces() : {} {
	<LPAREN>|<RPAREN>
}
